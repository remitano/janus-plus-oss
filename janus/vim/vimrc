""
"" Janus setup
""

" Define paths
if has('win32') || has('win64') || has('win32unix')
  let g:janus_path = escape(expand("~/.vim/janus/vim"), ' ')
  let g:janus_vim_path = escape(expand("~/.vim/janus/vim"), ' ')
else
  let g:janus_path = escape(fnamemodify(resolve(expand("<sfile>:p")), ":h"), ' ')
  let g:janus_vim_path = escape(fnamemodify(resolve(expand("<sfile>:p" . "vim")), ":h"), ' ')
endif
let g:janus_custom_path = expand("~/.janus")

" Source janus's core
exe 'source ' . g:janus_vim_path . '/core/before/plugin/janus.vim'

" You should note that groups will be processed by Pathogen in reverse
" order they were added.
call janus#add_group("tools")
call janus#add_group("langs")
call janus#add_group("colors")

""
"" Customisations
""

" Disable plugins prior to loading pathogen
exe 'source ' . g:janus_vim_path . '/core/plugins.vim'

""
"" Pathogen setup
""

" Load all groups, custom dir, and janus core
call janus#load_pathogen()

call vundle#begin()
Plugin 'Konfekt/FastFold'
Plugin 'sbdchd/neoformat'
Plugin 'janko-m/vim-test'
Plugin 'benmills/vimux'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'vim-ruby/vim-ruby'
Plugin 'bogado/file-line'
Plugin 'tpope/vim-abolish'
Plugin 'tmux-plugins/vim-tmux-focus-events'
Plugin 'Yggdroot/LeaderF'

if filereadable(expand("~/.vimrc.before"))
  source ~/.vimrc.before
endif
call vundle#end()


highlight ExtraWhitespace ctermbg=yellow guibg=yellow
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

autocmd BufWritePre * :%s/\s\+$//e

" make test commands execute using vimux.vim
let test#strategy = "vimux"
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> t<C-n> :TestNearest<CR> " t Ctrl+n
nmap <silent> t<C-f> :TestFile<CR>    " t Ctrl+f
nmap <silent> t<C-s> :TestSuite<CR>   " t Ctrl+s
nmap <silent> t<C-l> :TestLast<CR>    " t Ctrl+l
nmap <silent> t<C-g> :TestVisit<CR>   " t Ctrl+g

" Delete a line without override the default register
noremap R "_d

" No need to hold shift comma anymore
nnoremap ; :

let mapleader = "\<SPACE>"
" No need for ex mode
  nnoremap Q <nop>
" recording macros is not my thing
  map q <Nop>

" Align blocks of text and keep them selected
  vmap < <gv
  vmap > >gv
  nnoremap <leader>d "_d
  vnoremap <leader>d "_d

set timeoutlen=500
set ttimeoutlen=100

" Use ripgrep for Ack
if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat=%f:%l:%c:%m,%f:%l:%m

  let g:ackprg = 'rg --vimgrep --no-heading'
elseif executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  " Use ag over ack
  let g:ackprg = 'ag --vimgrep'
endif

let g:syntastic_mode_map={ "mode": "passive" }

" Some NERDTree configution
let NERDTreeShowHidden=1
let NERDTreeIgnore = ['\.DS_Store$', '\.git$']
let NERDTreeAutoDeleteBuffer=1
let NERDTreeQuitOnOpen=1

nmap <silent> <Leader>n :NERDTreeFind<CR>
map <silent> - :NERDTreeToggle<CR>

" Fix nerdtree syntax highlight too slow
augroup nerdtreedisablecursorline
  autocmd!
  autocmd FileType nerdtree setlocal nocursorline
augroup end

" NerdCommenter
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = "left"

" .vimrc.after is loaded after the plugins have loaded
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_rails = 1

" Refresh changed content of a file
set autoread
autocmd BufEnter,FocusGained * checktime

" Clear highlighting on escape in normal mode
" The second line is needed for mapping to the escape key since Vim internally uses escape to represent special keys.
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[

" copy current files path to clipboard
nmap cp :let @+= expand("%") <cr>

" re-index tags file
map <Leader>ct :!ctags --extra=+f -R *<CR><CR>

" Yggdroot/LeaderF
let g:Lf_ReverseOrder = 1
nmap <C-p> :LeaderfFile<CR>
nmap <C-l> :LeaderfMru<CR>
